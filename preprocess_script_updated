#!/bin/bash

# Created by Hari Chandan Pokuri 


# Lets now start the preprocess of the dataset based on few conditions given.

# Find the missing values and store the updated data in new .tsv file
output_file="updated_data.tsv"


function datacleaning() {
    file=$1
     if [ -e "$file" ]; then  
      # Data cleaning to start

        # Lets start removing the unwanted columns from the data set which are Location_of_Breached_Information and Summary
        column_names=("Location_of_Breached_Information" "Summary")
        cut -f 1-5 "$1" > "$output_file"
        # This Drops the specified columns

        # Now lets clean the column Type_of_Breach
        fileafter_breach="fileafter_breach.tsv"

        awk 'BEGIN{FS=OFS="\t"} {
             if ($5 ~ /[,\/]/) {
            split($5, type_parts, /[,\/]/)
            $5 = type_parts[1]
            }
            print
        }' "$output_file" > "$fileafter_breach"

        #Now lets check if there are any missing records if so delete the row
        final_table_after_cleaning='final_data.tsv'

        awk -F'\t' 'BEGIN {OFS="\t"} {
        skip_row = 0;
        for (i = 1; i <= NF; i++) {
            if ($i == "") {
            skip_row = 1;
            break;
            }
        }
        if (!skip_row) {
            print $0;
        }
        }' "$fileafter_breach" > "$final_table_after_cleaning"

        #Now creating two new columns Month and Year which is to be taken from the Date_of_Breach column
        date_updated_file="date_updated_file.tsv"

            awk 'BEGIN{FS=OFS="\t"} {
        if ($4 ~ /^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{2}$/ || $4 ~ /^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}$/) {
            split($4, date_parts, "/")
            month = sprintf("%02d", date_parts[1])  # Month column with leading zero
            year = sprintf("%04d", date_parts[3])  # Year column with four digits
            if (length(date_parts[3]) == 2) {  # Handle two-digit year format
                year = "20" date_parts[3]
            }
            $6 = month  # Month column
            $7 = year  # Year column
        } else if ($4 ~ /^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{2}-[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{2}$/ || $4 ~ /^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{2}-[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}$/) {
            split($4, date_range, " - ")  # Split the date range into start and end dates
            split(date_range[1], start_date_parts, "/")  # Split the start date components
            month = sprintf("%02d", start_date_parts[1])  # Month column with leading zero
            year = sprintf("%04d", start_date_parts[3])  # Year column with four digits
            if (length(start_date_parts[3]) == 2) {  # Handle two-digit year format
                year = "20" start_date_parts[3]
            }
            $6 = month  # Month column
            $7 = year  # Year column
        } else {
            split($4, date_parts, " - ")  # Split the date range into parts
            split(date_parts[1], start_date_parts, "/")  # Split the start date components
            month = sprintf("%02d", start_date_parts[1])  # Month column with leading zero
            year = sprintf("%04d", start_date_parts[3])  # Year column with four digits
            if (length(start_date_parts[3]) == 2) {  # Handle two-digit year format
                year = "20" start_date_parts[3]
            }
            $6 = month  # Month column
            $7 = year  # Year column
                }
                print
            }
         NR==1 { $6 = "Month"; $7 = "Year" }  # Change column headers
        ' "$final_table_after_cleaning" > "$date_updated_file"

        # Check the State column if there is any missing data and also making sure that state column is having for sure 2 digit code.
        column_drop_table1='column_drop_table1.tsv'
        awk -F'\t' 'BEGIN {OFS="\t"} {
        if ($2 == "" || length($2) != 2) {
            next;
        } else {
            print $0;
        }
        }' "$date_updated_file" | sed '1s/^/Name_of_Covered_Entity\tState\tIndividuals_Affected\tDate_of_Breach\tType_of_Breach\tMonth\tYear\n/' > "$column_drop_table1"

        # Finally lets see check the Individuals effected column
        awk 'BEGIN{FS=OFS="\t"} {
        if ($5 > 0) {
            print $0
        } else {
            $5 = 0
            print $0
        }
        }' "$column_drop_table1"

        rm $column_drop_table1 $date_updated_file $final_table_after_cleaning $fileafter_breach $output_file

     else
        echo "File does not exist in the directory"
    fi
}

"$@"